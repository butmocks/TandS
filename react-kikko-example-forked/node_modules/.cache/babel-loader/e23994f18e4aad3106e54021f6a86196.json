{"ast":null,"code":"import _regeneratorRuntime from \"/home/butmocks/Projects/TandS/react-kikko-example-forked/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/home/butmocks/Projects/TandS/react-kikko-example-forked/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _taggedTemplateLiteral from \"/home/butmocks/Projects/TandS/react-kikko-example-forked/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nimport _asyncToGenerator from \"/home/butmocks/Projects/TandS/react-kikko-example-forked/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _templateObject, _templateObject2;\nimport { runInTransaction, runQuery } from \"@kikko-land/kikko\";\nimport { sql, generateInsert } from \"@kikko-land/sql\";\nvar migrationsTable = \"migrations\";\nvar runMigrations = function runMigrations(state, migrations) {\n  if (migrations.length === 0) return;\n  return runInTransaction(state, /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(state2) {\n      var migratedMigrations, migratedIds, _iterator, _step, migration;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return runQuery(state2, sql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n        CREATE TABLE IF NOT EXISTS \", \" (\\n          id INTEGER PRIMARY KEY,\\n          name varchar(20) NOT NULL,\\n          migratedAt INTEGER NOT NULL\\n        )\\n      \"])), sql.raw(migrationsTable)));\n            case 2:\n              _context.next = 4;\n              return runQuery(state2, sql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"SELECT id FROM \", \"\"])), sql.raw(migrationsTable)));\n            case 4:\n              migratedMigrations = _context.sent;\n              migratedIds = new Set(migratedMigrations.map(function (_ref2) {\n                var id = _ref2.id;\n                return id;\n              }));\n              _iterator = _createForOfIteratorHelper(migrations.sort(function (a, b) {\n                return a.id - b.id;\n              }));\n              _context.prev = 7;\n              _iterator.s();\n            case 9:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 19;\n                break;\n              }\n              migration = _step.value;\n              if (!migratedIds.has(migration.id)) {\n                _context.next = 13;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 13:\n              _context.next = 15;\n              return migration.up(state2);\n            case 15:\n              _context.next = 17;\n              return runQuery(state2, generateInsert(migrationsTable, [{\n                id: migration.id,\n                name: migration.name,\n                migratedAt: new Date().getTime()\n              }]));\n            case 17:\n              _context.next = 9;\n              break;\n            case 19:\n              _context.next = 24;\n              break;\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](7);\n              _iterator.e(_context.t0);\n            case 24:\n              _context.prev = 24;\n              _iterator.f();\n              return _context.finish(24);\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 21, 24, 27]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nvar migrationsPlugin = function migrationsPlugin(_ref3) {\n  var migrations = _ref3.migrations;\n  return function (state) {\n    state.sharedState.eventsEmitter.on(\"initialized\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return runMigrations(state, migrations);\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n    return state;\n  };\n};\nexport { migrationsPlugin };","map":{"version":3,"mappings":";;;;;;;AAUA,IAAMA,kBAAkB;AAExB,IAAMC,gBAAgB,SAAhBA,cAAiBC,OAAiBC,YAA6B;EACnE,IAAIA,WAAWC,WAAW,GAAG;EAEtB,wBAAiBF;IAAA,sEAAO,iBAAOG;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAC9BC,SACJD,QACAE,uPAC+BA,IAAIC,IAAIR,eAAe,GAMxD;YAAA;cAAA;cAAA,OAEiCM,SAC/BD,QACAE,8FAAqBA,IAAIC,IAAIR,eAAe,GAC9C;YAAA;cAHMS;cAKAC,cAAc,IAAIC,IAAIF,mBAAmBG,IAAI;gBAAA,IAAGC;gBAAA,OAASA,EAAE;cAAA,EAAC;cAAA,uCAE1CV,WAAWW,KAAK,UAACC,GAAGC;gBAAA,OAAMD,EAAEF,KAAKG,EAAEH,EAAE;cAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAlDI;cAAA,KACLP,YAAYQ,IAAID,UAAUJ,EAAE;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAE1BI,UAAUE,GAAGd,MAAK;YAAA;cAAA;cAAA,OAElBC,SACJD,QACAe,eAAepB,iBAAiB,CAC9B;gBACEa,IAAII,UAAUJ;gBACdQ,MAAMJ,UAAUI;gBAChBC,YAAY,IAAIC,MAAK,CAAEC;cACzB,EACD,CACH;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEH;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,IAAMC,mBAAmB,SAAnBA;EAAA,IACXtB;EAAA,OAGqB,UAACD,OAAoB;IAC1CA,MAAMwB,YAAYC,cAAcC,GAAG,uFAAe;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAC1C3B,cAAcC,OAAOC,UAAU;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACtC;IAEM;EACT;AAAA","names":["migrationsTable","runMigrations","state","migrations","length","state2","runQuery","sql","raw","migratedMigrations","migratedIds","Set","map","id","sort","a","b","migration","has","up","generateInsert","name","migratedAt","Date","getTime","migrationsPlugin","sharedState","eventsEmitter","on"],"sources":["../src/migrationPlugin.ts"],"sourcesContent":["import {\n  IDbClientPlugin,\n  IDbState,\n  runInTransaction,\n  runQuery,\n} from \"@kikko-land/kikko\";\nimport { generateInsert, sql } from \"@kikko-land/sql\";\n\nimport { IMigration } from \"./types\";\n\nconst migrationsTable = \"migrations\";\n\nconst runMigrations = (state: IDbState, migrations: IMigration[]) => {\n  if (migrations.length === 0) return;\n\n  return runInTransaction(state, async (state) => {\n    await runQuery(\n      state,\n      sql`\n        CREATE TABLE IF NOT EXISTS ${sql.raw(migrationsTable)} (\n          id INTEGER PRIMARY KEY,\n          name varchar(20) NOT NULL,\n          migratedAt INTEGER NOT NULL\n        )\n      `\n    );\n\n    const migratedMigrations = await runQuery<{ id: number }>(\n      state,\n      sql`SELECT id FROM ${sql.raw(migrationsTable)}`\n    );\n\n    const migratedIds = new Set(migratedMigrations.map(({ id }) => id));\n\n    for (const migration of migrations.sort((a, b) => a.id - b.id)) {\n      if (migratedIds.has(migration.id)) return;\n\n      await migration.up(state);\n\n      await runQuery(\n        state,\n        generateInsert(migrationsTable, [\n          {\n            id: migration.id,\n            name: migration.name,\n            migratedAt: new Date().getTime(),\n          },\n        ])\n      );\n    }\n  });\n};\n\nexport const migrationsPlugin = ({\n  migrations,\n}: {\n  migrations: IMigration[];\n}): IDbClientPlugin => (state: IDbState) => {\n  state.sharedState.eventsEmitter.on(\"initialized\", async () => {\n    await runMigrations(state, migrations);\n  });\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}