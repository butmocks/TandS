{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/butmocks/Projects/TandS/react-kikko-example-forked/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nimport _slicedToArray from \"/home/butmocks/Projects/TandS/react-kikko-example-forked/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _templateObject,\n  _s = $RefreshSig$();\nimport { select } from \"@kikko-land/query-builder\";\nimport { sql, useQueryFirstRow } from \"@kikko-land/react\";\nimport { useCallback, useEffect, useState } from \"react\";\nexport var usePaginator = function usePaginator(_ref) {\n  _s();\n  var _countResult$data;\n  var perPage = _ref.perPage,\n    baseQuery = _ref.baseQuery;\n  var _useState = useState(1),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentPage = _useState2[0],\n    setPage = _useState2[1];\n  var countResult = useQueryFirstRow(select({\n    count: sql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"COUNT(*)\"])))\n  }).from(baseQuery));\n  var totalCount = (_countResult$data = countResult.data) === null || _countResult$data === void 0 ? void 0 : _countResult$data.count;\n  var totalPages = totalCount !== undefined ? Math.ceil(totalCount / perPage) || 1 : undefined;\n  useEffect(function () {\n    if (totalPages === undefined) return;\n    if (totalPages === 0) {\n      setPage(1);\n      return;\n    }\n    if (currentPage > totalPages) {\n      setPage(totalPages);\n    }\n  }, [currentPage, totalPages]);\n  var isNextPageAvailable = totalPages !== undefined ? currentPage < totalPages : false;\n  var isPrevPageAvailable = currentPage > 1;\n  var nextPage = useCallback(function () {\n    if (isNextPageAvailable) {\n      setPage(currentPage + 1);\n    }\n  }, [currentPage, isNextPageAvailable]);\n  var prevPage = useCallback(function () {\n    if (isPrevPageAvailable) {\n      setPage(currentPage - 1);\n    }\n  }, [currentPage, isPrevPageAvailable]);\n  return {\n    paginatedQuery: baseQuery.limit(perPage).offset(perPage * (currentPage - 1)),\n    totalPages: totalPages,\n    currentPage: currentPage,\n    totalCount: totalCount,\n    isNextPageAvailable: isNextPageAvailable,\n    isPrevPageAvailable: isPrevPageAvailable,\n    nextPage: nextPage,\n    prevPage: prevPage\n  };\n};\n_s(usePaginator, \"GnpNE/cZ6zqOflQotP15/9WJ2og=\", false, function () {\n  return [useQueryFirstRow];\n});","map":{"version":3,"names":["select","sql","useQueryFirstRow","useCallback","useEffect","useState","usePaginator","perPage","baseQuery","currentPage","setPage","countResult","count","from","totalCount","data","totalPages","undefined","Math","ceil","isNextPageAvailable","isPrevPageAvailable","nextPage","prevPage","paginatedQuery","limit","offset"],"sources":["/home/butmocks/Projects/TandS/react-kikko-example-forked/src/hooks/usePaginator.ts"],"sourcesContent":["import { ISelectStatement, select } from \"@kikko-land/query-builder\";\nimport { sql, useQueryFirstRow } from \"@kikko-land/react\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nexport const usePaginator = ({\n  perPage,\n  baseQuery\n}: {\n  perPage: number;\n  baseQuery: ISelectStatement;\n}) => {\n  const [currentPage, setPage] = useState(1);\n\n  const countResult = useQueryFirstRow<{ count: number }>(\n    select({ count: sql`COUNT(*)` }).from(baseQuery)\n  );\n\n  const totalCount = countResult.data?.count;\n\n  const totalPages =\n    totalCount !== undefined ? Math.ceil(totalCount / perPage) || 1 : undefined;\n\n  useEffect(() => {\n    if (totalPages === undefined) return;\n    if (totalPages === 0) {\n      setPage(1);\n\n      return;\n    }\n\n    if (currentPage > totalPages) {\n      setPage(totalPages);\n    }\n  }, [currentPage, totalPages]);\n\n  const isNextPageAvailable =\n    totalPages !== undefined ? currentPage < totalPages : false;\n  const isPrevPageAvailable = currentPage > 1;\n\n  const nextPage = useCallback(() => {\n    if (isNextPageAvailable) {\n      setPage(currentPage + 1);\n    }\n  }, [currentPage, isNextPageAvailable]);\n\n  const prevPage = useCallback(() => {\n    if (isPrevPageAvailable) {\n      setPage(currentPage - 1);\n    }\n  }, [currentPage, isPrevPageAvailable]);\n\n  return {\n    paginatedQuery: baseQuery\n      .limit(perPage)\n      .offset(perPage * (currentPage - 1)),\n    totalPages,\n    currentPage,\n    totalCount,\n    isNextPageAvailable,\n    isPrevPageAvailable,\n    nextPage,\n    prevPage\n  };\n};\n"],"mappings":";;;;AAAA,SAA2BA,MAAM,QAAQ,2BAA2B;AACpE,SAASC,GAAG,EAAEC,gBAAgB,QAAQ,mBAAmB;AACzD,SAASC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAExD,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAY,OAMnB;EAAA;EAAA;EAAA,IALJC,OAAO,QAAPA,OAAO;IACPC,SAAS,QAATA,SAAS;EAKT,gBAA+BH,QAAQ,CAAC,CAAC,CAAC;IAAA;IAAnCI,WAAW;IAAEC,OAAO;EAE3B,IAAMC,WAAW,GAAGT,gBAAgB,CAClCF,MAAM,CAAC;IAAEY,KAAK,EAAEX,GAAG;EAAW,CAAC,CAAC,CAACY,IAAI,CAACL,SAAS,CAAC,CACjD;EAED,IAAMM,UAAU,wBAAGH,WAAW,CAACI,IAAI,sDAAhB,kBAAkBH,KAAK;EAE1C,IAAMI,UAAU,GACdF,UAAU,KAAKG,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACL,UAAU,GAAGP,OAAO,CAAC,IAAI,CAAC,GAAGU,SAAS;EAE7Eb,SAAS,CAAC,YAAM;IACd,IAAIY,UAAU,KAAKC,SAAS,EAAE;IAC9B,IAAID,UAAU,KAAK,CAAC,EAAE;MACpBN,OAAO,CAAC,CAAC,CAAC;MAEV;IACF;IAEA,IAAID,WAAW,GAAGO,UAAU,EAAE;MAC5BN,OAAO,CAACM,UAAU,CAAC;IACrB;EACF,CAAC,EAAE,CAACP,WAAW,EAAEO,UAAU,CAAC,CAAC;EAE7B,IAAMI,mBAAmB,GACvBJ,UAAU,KAAKC,SAAS,GAAGR,WAAW,GAAGO,UAAU,GAAG,KAAK;EAC7D,IAAMK,mBAAmB,GAAGZ,WAAW,GAAG,CAAC;EAE3C,IAAMa,QAAQ,GAAGnB,WAAW,CAAC,YAAM;IACjC,IAAIiB,mBAAmB,EAAE;MACvBV,OAAO,CAACD,WAAW,GAAG,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACA,WAAW,EAAEW,mBAAmB,CAAC,CAAC;EAEtC,IAAMG,QAAQ,GAAGpB,WAAW,CAAC,YAAM;IACjC,IAAIkB,mBAAmB,EAAE;MACvBX,OAAO,CAACD,WAAW,GAAG,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACA,WAAW,EAAEY,mBAAmB,CAAC,CAAC;EAEtC,OAAO;IACLG,cAAc,EAAEhB,SAAS,CACtBiB,KAAK,CAAClB,OAAO,CAAC,CACdmB,MAAM,CAACnB,OAAO,IAAIE,WAAW,GAAG,CAAC,CAAC,CAAC;IACtCO,UAAU,EAAVA,UAAU;IACVP,WAAW,EAAXA,WAAW;IACXK,UAAU,EAAVA,UAAU;IACVM,mBAAmB,EAAnBA,mBAAmB;IACnBC,mBAAmB,EAAnBA,mBAAmB;IACnBC,QAAQ,EAARA,QAAQ;IACRC,QAAQ,EAARA;EACF,CAAC;AACH,CAAC;AAAC,GA3DWjB,YAAY;EAAA,QASHJ,gBAAgB;AAAA"},"metadata":{},"sourceType":"module"}