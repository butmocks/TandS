{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TRANSACTION_SETTINGS = void 0;\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.commitIndexedDBTransaction = commitIndexedDBTransaction;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessagesById = removeMessagesById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\nvar _util = require(\"../util.js\");\nvar _obliviousSet = require(\"oblivious-set\");\nvar _options = require(\"../options.js\");\n\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nvar TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexports.TRANSACTION_SETTINGS = TRANSACTION_SETTINGS;\nvar type = 'idb';\nexports.type = type;\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nfunction commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\nfunction getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nfunction removeMessagesById(channelState, ids) {\n  if (channelState.closed) {\n    return Promise.resolve([]);\n  }\n  var tx = channelState.db.transaction(OBJECT_STORE_ID, 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        var msgObk = cursor.value;\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nfunction cleanOldMessages(channelState) {\n  return getOldMessages(channelState.db, channelState.options.idb.ttl).then(function (tooOld) {\n    return removeMessagesById(channelState, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n    _readLoop(state);\n    return state;\n  });\n}\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */.filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nfunction canBeUsed() {\n  var idb = getIdb();\n  if (!idb) {\n    return false;\n  }\n  return true;\n}\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","TRANSACTION_SETTINGS","averageResponseTime","canBeUsed","cleanOldMessages","close","commitIndexedDBTransaction","create","createDatabase","getAllMessages","getIdb","getMessagesHigherThan","getOldMessages","microSeconds","onMessage","postMessage","removeMessagesById","type","writeMessage","_util","require","_obliviousSet","_options","DB_PREFIX","OBJECT_STORE_ID","durability","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","tx","commit","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","ret","openCursor","cursor","push","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","getAll","getAllRequest","err","e","openCursorRequest","id","channelState","ids","closed","resolve","all","map","deleteRequest","ttl","olderThen","msgObk","options","idb","then","tooOld","msg","fillOptionsWithDefaults","state","randomToken","eMIs","ObliviousSet","writeBlockPromise","PROMISE_RESOLVED_VOID","messagesCallback","readQueuePromises","onclose","_readLoop","readNewMessages","sleep","fallbackInterval","_filterMessage","msgObj","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","randomInt","fn","_default"],"sources":["/home/butmocks/Projects/TandS/react-kikko-example-forked/node_modules/broadcast-channel/dist/lib/methods/indexed-db.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TRANSACTION_SETTINGS = void 0;\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.commitIndexedDBTransaction = commitIndexedDBTransaction;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessagesById = removeMessagesById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\n\nvar _util = require(\"../util.js\");\n\nvar _obliviousSet = require(\"oblivious-set\");\n\nvar _options = require(\"../options.js\");\n\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nvar TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexports.TRANSACTION_SETTINGS = TRANSACTION_SETTINGS;\nvar type = 'idb';\nexports.type = type;\n\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\n\nfunction commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\n\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\n\nfunction getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction removeMessagesById(channelState, ids) {\n  if (channelState.closed) {\n    return Promise.resolve([]);\n  }\n\n  var tx = channelState.db.transaction(OBJECT_STORE_ID, 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\n\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction cleanOldMessages(channelState) {\n  return getOldMessages(channelState.db, channelState.options.idb.ttl).then(function (tooOld) {\n    return removeMessagesById(channelState, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\n\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\n\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\n\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\n\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\n\nfunction canBeUsed() {\n  var idb = getIdb();\n\n  if (!idb) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\n\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}