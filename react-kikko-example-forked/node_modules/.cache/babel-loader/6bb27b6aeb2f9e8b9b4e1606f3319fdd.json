{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _words = require(\"../constants/words\");\nvar _util = require(\"../util\");\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar Generator = /*#__PURE__*/function () {\n  function Generator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$sentencesPerPara = _ref.sentencesPerParagraph,\n      sentencesPerParagraph = _ref$sentencesPerPara === void 0 ? {\n        max: 7,\n        min: 3\n      } : _ref$sentencesPerPara,\n      _ref$wordsPerSentence = _ref.wordsPerSentence,\n      wordsPerSentence = _ref$wordsPerSentence === void 0 ? {\n        max: 15,\n        min: 5\n      } : _ref$wordsPerSentence,\n      random = _ref.random,\n      seed = _ref.seed,\n      _ref$words = _ref.words,\n      words = _ref$words === void 0 ? _words.WORDS : _ref$words;\n    _classCallCheck(this, Generator);\n    _defineProperty(this, \"sentencesPerParagraph\", void 0);\n    _defineProperty(this, \"wordsPerSentence\", void 0);\n    _defineProperty(this, \"random\", void 0);\n    _defineProperty(this, \"words\", void 0);\n    if (sentencesPerParagraph.min > sentencesPerParagraph.max) {\n      throw new Error(\"Minimum number of sentences per paragraph (\".concat(sentencesPerParagraph.min, \") cannot exceed maximum (\").concat(sentencesPerParagraph.max, \").\"));\n    }\n    if (wordsPerSentence.min > wordsPerSentence.max) {\n      throw new Error(\"Minimum number of words per sentence (\".concat(wordsPerSentence.min, \") cannot exceed maximum (\").concat(wordsPerSentence.max, \").\"));\n    }\n    this.sentencesPerParagraph = sentencesPerParagraph;\n    this.words = words;\n    this.wordsPerSentence = wordsPerSentence;\n    this.random = random || Math.random;\n  }\n  _createClass(Generator, [{\n    key: \"generateRandomInteger\",\n    value: function generateRandomInteger(min, max) {\n      return Math.floor(this.random() * (max - min + 1) + min);\n    }\n  }, {\n    key: \"generateRandomWords\",\n    value: function generateRandomWords(num) {\n      var _this = this;\n      var _this$wordsPerSentenc = this.wordsPerSentence,\n        min = _this$wordsPerSentenc.min,\n        max = _this$wordsPerSentenc.max;\n      var length = num || this.generateRandomInteger(min, max);\n      return (0, _util.makeArrayOfLength)(length).reduce(function (accumulator, index) {\n        return \"\".concat(_this.pluckRandomWord(), \" \").concat(accumulator);\n      }, \"\").trim();\n    }\n  }, {\n    key: \"generateRandomSentence\",\n    value: function generateRandomSentence(num) {\n      return \"\".concat((0, _util.capitalize)(this.generateRandomWords(num)), \".\");\n    }\n  }, {\n    key: \"generateRandomParagraph\",\n    value: function generateRandomParagraph(num) {\n      var _this2 = this;\n      var _this$sentencesPerPar = this.sentencesPerParagraph,\n        min = _this$sentencesPerPar.min,\n        max = _this$sentencesPerPar.max;\n      var length = num || this.generateRandomInteger(min, max);\n      return (0, _util.makeArrayOfLength)(length).reduce(function (accumulator, index) {\n        return \"\".concat(_this2.generateRandomSentence(), \" \").concat(accumulator);\n      }, \"\").trim();\n    }\n  }, {\n    key: \"pluckRandomWord\",\n    value: function pluckRandomWord() {\n      var min = 0;\n      var max = this.words.length - 1;\n      var index = this.generateRandomInteger(min, max);\n      return this.words[index];\n    }\n  }]);\n  return Generator;\n}();\nvar _default = Generator;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuBMA,S;EAMJ,qBAM2B;IAAA,+EAAJ,EAAI;MAAAC,6BALzBC,qBAKyB;MALzBA,qBAKyB,sCALD;QAAEC,GAAG,EAAE,CAAP;QAAUC,GAAG,EAAE;MAAf,CAKC;MAAAC,6BAJzBC,gBAIyB;MAJzBA,gBAIyB,sCAJN;QAAEH,GAAG,EAAE,EAAP;QAAWC,GAAG,EAAE;MAAhB,CAIM;MAHzBG,MAGyB,QAHzBA,MAGyB;MAFzBC,IAEyB,QAFzBA,IAEyB;MAAAC,kBADzBC,KACyB;MADzBA,KACyB,2BADjBC,YACiB;IAAAC;IAAAC;IAAAA;IAAAA;IAAAA;IACzB,IAAIX,qBAAqB,CAACE,GAAtB,GAA4BF,qBAAqB,CAACC,GAAtD,EAA2D;MACzD,MAAM,IAAIW,KAAJ,sDAEFZ,qBAAqB,CAACE,GAFpB,sCAGwBF,qBAAqB,CAACC,GAH9C,QAAN;IAKD;IAED,IAAIG,gBAAgB,CAACF,GAAjB,GAAuBE,gBAAgB,CAACH,GAA5C,EAAiD;MAC/C,MAAM,IAAIW,KAAJ,iDAEFR,gBAAgB,CAACF,GAFf,sCAGwBE,gBAAgB,CAACH,GAHzC,QAAN;IAKD;IAED,KAAKD,qBAAL,GAA6BA,qBAA7B;IACA,KAAKQ,KAAL,GAAaA,KAAb;IACA,KAAKJ,gBAAL,GAAwBA,gBAAxB;IACA,KAAKC,MAAL,GAAcA,MAAM,IAAIQ,IAAI,CAACR,MAA7B;EACD;;;WAED,+BAA6BH,GAA7B,EAA0CD,GAA1C,EAA+D;MAC7D,OAAOY,IAAI,CAACC,KAAL,CAAW,KAAKT,MAAL,MAAiBJ,GAAG,GAAGC,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;IACD;;;WAED,6BAA2Ba,GAA3B,EAAiD;MAAA;MAC/C,4BAAqB,KAAKX,gBAA1B;QAAQF,GAAR,yBAAQA,GAAR;QAAaD,GAAb,yBAAaA,GAAb;MACA,IAAMe,MAAM,GAAGD,GAAG,IAAI,KAAKE,qBAAL,CAA2Bf,GAA3B,EAAgCD,GAAhC,CAAtB;MACA,OAAO,6BAAkBe,MAAlB,EACJE,MADI,CACG,UAACC,WAAD,EAAsBC,KAAtB,EAAgD;QACtD,iBAAUC,KAAI,CAACC,eAAL,EAAV,cAAoCH,WAApC;MACD,CAHI,EAGF,EAHE,EAIJI,IAJI,EAAP;IAKD;;;WAED,gCAA8BR,GAA9B,EAAoD;MAClD,iBAAU,sBAAW,KAAKS,mBAAL,CAAyBT,GAAzB,CAAX,CAAV;IACD;;;WAED,iCAA+BA,GAA/B,EAAqD;MAAA;MACnD,4BAAqB,KAAKf,qBAA1B;QAAQE,GAAR,yBAAQA,GAAR;QAAaD,GAAb,yBAAaA,GAAb;MACA,IAAMe,MAAM,GAAGD,GAAG,IAAI,KAAKE,qBAAL,CAA2Bf,GAA3B,EAAgCD,GAAhC,CAAtB;MACA,OAAO,6BAAkBe,MAAlB,EACJE,MADI,CACG,UAACC,WAAD,EAAsBC,KAAtB,EAAgD;QACtD,iBAAUK,MAAI,CAACC,sBAAL,EAAV,cAA2CP,WAA3C;MACD,CAHI,EAGF,EAHE,EAIJI,IAJI,EAAP;IAKD;;;WAED,2BAAiC;MAC/B,IAAMrB,GAAG,GAAG,CAAZ;MACA,IAAMD,GAAG,GAAG,KAAKO,KAAL,CAAWQ,MAAX,GAAoB,CAAhC;MACA,IAAMI,KAAK,GAAG,KAAKH,qBAAL,CAA2Bf,GAA3B,EAAgCD,GAAhC,CAAd;MACA,OAAO,KAAKO,KAAL,CAAWY,KAAX,CAAP;IACD;;;;eAGYtB,S","names":["Generator","_ref$sentencesPerPara","sentencesPerParagraph","max","min","_ref$wordsPerSentence","wordsPerSentence","random","seed","_ref$words","words","WORDS","_classCallCheck","_defineProperty","Error","Math","floor","num","length","generateRandomInteger","reduce","accumulator","index","_this","pluckRandomWord","trim","generateRandomWords","_this2","generateRandomSentence"],"sources":["../../src/lib/generator.ts"],"sourcesContent":["import { WORDS } from \"../constants/words\";\r\nimport { capitalize, makeArrayOfLength } from \"../util\";\r\n\r\nexport interface IBounds {\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport type IPrng = () => number;\r\n\r\nexport type ISeedRandom = new (seed?: string) => IPrng;\r\n\r\nexport interface IMath {\r\n  seedrandom: ISeedRandom;\r\n}\r\n\r\nexport interface IGeneratorOptions {\r\n  sentencesPerParagraph?: IBounds;\r\n  wordsPerSentence?: IBounds;\r\n  random?: IPrng;\r\n  seed?: string;\r\n  words?: string[];\r\n}\r\n\r\nclass Generator {\r\n  public sentencesPerParagraph: IBounds;\r\n  public wordsPerSentence: IBounds;\r\n  public random: IPrng;\r\n  public words: string[];\r\n\r\n  constructor({\r\n    sentencesPerParagraph = { max: 7, min: 3 },\r\n    wordsPerSentence = { max: 15, min: 5 },\r\n    random,\r\n    seed,\r\n    words = WORDS,\r\n  }: IGeneratorOptions = {}) {\r\n    if (sentencesPerParagraph.min > sentencesPerParagraph.max) {\r\n      throw new Error(\r\n        `Minimum number of sentences per paragraph (${\r\n          sentencesPerParagraph.min\r\n        }) cannot exceed maximum (${sentencesPerParagraph.max}).`,\r\n      );\r\n    }\r\n\r\n    if (wordsPerSentence.min > wordsPerSentence.max) {\r\n      throw new Error(\r\n        `Minimum number of words per sentence (${\r\n          wordsPerSentence.min\r\n        }) cannot exceed maximum (${wordsPerSentence.max}).`,\r\n      );\r\n    }\r\n\r\n    this.sentencesPerParagraph = sentencesPerParagraph;\r\n    this.words = words;\r\n    this.wordsPerSentence = wordsPerSentence;\r\n    this.random = random || Math.random;\r\n  }\r\n\r\n  public generateRandomInteger(min: number, max: number): number {\r\n    return Math.floor(this.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  public generateRandomWords(num?: number): string {\r\n    const { min, max } = this.wordsPerSentence;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.pluckRandomWord()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public generateRandomSentence(num?: number): string {\r\n    return `${capitalize(this.generateRandomWords(num))}.`;\r\n  }\r\n\r\n  public generateRandomParagraph(num?: number): string {\r\n    const { min, max } = this.sentencesPerParagraph;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.generateRandomSentence()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public pluckRandomWord(): string {\r\n    const min = 0;\r\n    const max = this.words.length - 1;\r\n    const index = this.generateRandomInteger(min, max);\r\n    return this.words[index];\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n"]},"metadata":{},"sourceType":"script"}