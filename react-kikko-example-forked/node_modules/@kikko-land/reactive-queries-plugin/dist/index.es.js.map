{"version":3,"file":"index.es.js","sources":["../src/utils.ts","../src/listenQueries.ts","../src/getBroadcastCh.ts","../src/reactivePlugin.ts"],"sourcesContent":["import { IDbState } from \"@kikko-land/kikko\";\n\nexport const getReactiveState = (state: IDbState) => {\n  const reactiveState = state.sharedState.reactiveQueriesState;\n\n  if (!reactiveState) {\n    throw new Error(\n      \"Internal error, maybe you forget to connect the 'reactiveQueries' plugin?\"\n    );\n  }\n\n  return reactiveState;\n};\n","import { IDbState, runQueries } from \"@kikko-land/kikko\";\nimport { ISqlAdapter } from \"@kikko-land/sql\";\nimport { filter, Observable, startWith, switchMap, takeUntil } from \"rxjs\";\n\nimport { IMessage } from \"./getBroadcastCh\";\nimport { getReactiveState } from \"./utils\";\n\nexport const listenQueries = <D extends Record<string, unknown>>(\n  db: IDbState,\n  queries: ISqlAdapter[]\n): Observable<D[][]> => {\n  const { eventsCh$ } = getReactiveState(db);\n\n  const readingTables = new Set(\n    queries\n      .map((q) => q.toSql())\n      .flatMap((q) => q.tables)\n      .map((t) => t.name)\n  );\n\n  return eventsCh$.pipe(\n    switchMap((ch) => {\n      return new Observable<IMessage>((subscriber) => {\n        const func = (data: IMessage) => {\n          subscriber.next(data);\n        };\n\n        ch.addEventListener(func);\n\n        return () => {\n          ch.removeEventListener(func);\n        };\n      });\n    }),\n    filter(({ changesInTables }) =>\n      changesInTables.some((table) => readingTables.has(table))\n    ),\n    startWith(undefined), // to exec query at start\n    switchMap(async () => {\n      return runQueries<D>(db, queries);\n    }),\n    takeUntil(db.sharedState.stopStarted$)\n  );\n};\n","import { Observable, ReplaySubject, share, takeUntil } from \"rxjs\";\n\nexport type IMessage = { changesInTables: string[] };\nexport type IListener = (msg: IMessage) => void;\nexport interface INotifyChannel {\n  postMessage(msg: IMessage): Promise<void>;\n  addEventListener(cb: IListener): void;\n  removeEventListener(cb: IListener): void;\n  close(): Promise<void>;\n}\n\nconst createMultiTabChannel = async (\n  name: string,\n  webMultiTabSupport: boolean\n): Promise<INotifyChannel> => {\n  const webChannel = await (async () => {\n    if (!webMultiTabSupport) return undefined;\n\n    return new (await import(\"broadcast-channel\")).BroadcastChannel(name, {\n      type: \"localstorage\",\n      webWorkerSupport: false,\n      // idb: {\n      //   onclose: () => {\n      //     // the onclose event is just the IndexedDB closing.\n      //     // you should also close the channel before creating\n      //     // a new one.\n      //     void currentChannel?.close();\n      //     createChannel();\n      //   },\n      // },\n    });\n  })();\n\n  let listeners: IListener[] = [];\n\n  return {\n    async postMessage(data) {\n      listeners.forEach((l) => {\n        l(data);\n      });\n\n      if (webChannel) {\n        await webChannel.postMessage(data);\n      }\n    },\n    addEventListener(cb) {\n      listeners.push(cb);\n\n      webChannel?.addEventListener(\"message\", cb);\n    },\n    removeEventListener(cb) {\n      listeners = listeners.filter((l) => l !== cb);\n\n      webChannel?.removeEventListener(\"message\", cb);\n    },\n    async close() {\n      listeners = [];\n\n      if (webChannel) {\n        await webChannel.close();\n      }\n    },\n  };\n};\n\nexport const getBroadcastCh = (\n  name: string,\n  webMultiTabSupport: boolean,\n  stop$: Observable<void>\n) => {\n  return new Observable<INotifyChannel>((sub) => {\n    let isClosed = false;\n    let currentChannel: INotifyChannel | undefined;\n\n    const init = async () => {\n      const ch = await createMultiTabChannel(name, webMultiTabSupport);\n\n      if (isClosed) return;\n\n      sub.next(ch);\n    };\n\n    void init();\n\n    return () => {\n      isClosed = true;\n      void currentChannel?.close();\n    };\n  }).pipe(\n    share({\n      connector: () => new ReplaySubject(1),\n    }),\n    takeUntil(stop$)\n  );\n};\n","import {\n  IDbClientPlugin,\n  IDbState,\n  IQueriesMiddleware,\n} from \"@kikko-land/kikko\";\nimport { firstValueFrom, switchMap } from \"rxjs\";\n\nimport { getBroadcastCh } from \"./getBroadcastCh\";\nimport { getReactiveState } from \"./utils\";\n\nconst notifyTablesContentChanged = async (\n  state: IDbState,\n  tables: string[]\n) => {\n  if (tables.length === 0) return;\n\n  const reactiveState = getReactiveState(state);\n\n  return firstValueFrom(\n    reactiveState.eventsCh$.pipe(\n      switchMap(async (ch) => {\n        await ch.postMessage({ changesInTables: tables });\n      })\n    )\n  );\n};\n\nexport const reactiveQueriesPlugin: (opts?: {\n  webMultiTabSupport?: boolean;\n}) => IDbClientPlugin = (opts) => (db) => {\n  const transactionTables: Record<string, { writeTables: Set<string> }> = {};\n  const { dbName, eventsEmitter, stopStarted$ } = db.sharedState;\n\n  const webMultiTabSupport =\n    opts?.webMultiTabSupport !== undefined ? opts.webMultiTabSupport : true;\n\n  const reactiveQueriesMiddleware: IQueriesMiddleware = (state) => {\n    const transaction = state.dbState.localState.transactionsState.current;\n\n    const writeTables = state.queries\n      .map((q) => q.toSql())\n      .filter((q) => q.isModifyQuery)\n      .flatMap((q) => q.tables)\n      .flatMap((def) => [\n        def.name,\n        ...def.dependsOnTables.map(({ name }) => name),\n      ]);\n\n    if (writeTables.length !== 0) {\n      if (transaction) {\n        if (!transactionTables[transaction.id]) {\n          throw new Error(\n            \"Internal error: records with transactionId key was not created\"\n          );\n        }\n\n        for (const t of writeTables) {\n          transactionTables[transaction.id].writeTables.add(t);\n        }\n      } else {\n        // dont await so notification happens after function return\n        void notifyTablesContentChanged(state.dbState, writeTables);\n      }\n    }\n\n    return state.next(state);\n  };\n\n  eventsEmitter.on(\"transactionWillStart\", (_db, transaction) => {\n    transactionTables[transaction.id] = { writeTables: new Set() };\n  });\n\n  eventsEmitter.on(\"transactionRollbacked\", (_db, transaction) => {\n    delete transactionTables[transaction.id];\n  });\n\n  eventsEmitter.on(\"transactionCommitted\", (db, transaction) => {\n    if (!transactionTables[transaction.id]) {\n      throw new Error(\n        \"Internal error: records with transactionId key was not created\"\n      );\n    }\n\n    void notifyTablesContentChanged(db, [\n      ...Array.from(transactionTables[transaction.id].writeTables),\n    ]);\n\n    delete transactionTables[transaction.id];\n  });\n\n  db.sharedState.reactiveQueriesState = {\n    eventsCh$: getBroadcastCh(\n      dbName + \"-reactiveQueriesPlugin\",\n      webMultiTabSupport,\n      stopStarted$\n    ),\n  };\n\n  return {\n    ...db,\n    localState: {\n      ...db.localState,\n      queriesMiddlewares: [\n        ...db.localState.queriesMiddlewares,\n        reactiveQueriesMiddleware,\n      ],\n    },\n  };\n};\n"],"names":[],"mappings":"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"}