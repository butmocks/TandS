{"version":3,"file":"index.umd.js","sources":["../src/afterTransaction.ts","../src/createNanoEvents.ts","../src/utils.ts","../src/job.ts","../src/initDb.ts","../src/runQueries.ts","../src/suppressLog.ts","../src/transaction.ts"],"sourcesContent":["import { IDbState, ITransaction } from \"./types\";\n\nconst runAfterTransaction = (\n  db: IDbState,\n  func: (\n    event: \"committed\" | \"rollbacked\",\n    db: IDbState,\n    transaction: ITransaction\n  ) => void\n) => {\n  if (!db.localState.transactionsState) {\n    throw new Error(\"Not in transaction.\");\n  }\n\n  const unsubscribes: (() => void)[] = [];\n\n  const listener =\n    (event: \"committed\" | \"rollbacked\") =>\n    (db: IDbState, transaction: ITransaction) => {\n      func(event, db, transaction);\n\n      for (const unsubscribe of unsubscribes) {\n        unsubscribe();\n      }\n    };\n\n  unsubscribes.push(\n    db.sharedState.eventsEmitter.on(\n      \"transactionCommitted\",\n      listener(\"committed\")\n    )\n  );\n\n  unsubscribes.push(\n    db.sharedState.eventsEmitter.on(\n      \"transactionRollbacked\",\n      listener(\"rollbacked\")\n    )\n  );\n};\n\nexport const runAfterTransactionCommitted = (\n  db: IDbState,\n  func: (db: IDbState, transaction: ITransaction) => void\n) => {\n  runAfterTransaction(db, (ev, db, transaction) => {\n    if (ev === \"committed\") {\n      func(db, transaction);\n    }\n  });\n};\n\nexport const runAfterTransactionRollbacked = (\n  db: IDbState,\n  func: (db: IDbState, transaction: ITransaction) => void\n) => {\n  runAfterTransaction(db, (ev, db, transaction) => {\n    if (ev === \"rollbacked\") {\n      func(db, transaction);\n    }\n  });\n};\n","// Adopted from https://github.com/ai/nanoevents/blob/main/index.js\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type EventsMap<K extends keyof any> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [P in K]: (...args: any[]) => Promise<void> | void;\n};\n\n// Adopted from https://github.com/ai/nanoevents\n// I didn't use original due to lack of cjs support\n\nexport function createNanoEvents<Events extends EventsMap<keyof Events>>() {\n  const events: Partial<{ [E in keyof Events]: Events[E][] }> = {};\n\n  return {\n    async emit<K extends keyof Events>(\n      event: K,\n      ...args: Parameters<Events[K]>\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      const all = (events[event] || []) as Events[K][];\n      for (const toCall of all) {\n        await toCall(...args);\n      }\n    },\n    on<K extends keyof Events>(event: K, cb: Events[K]): () => void {\n      ((events[event] = events[event] || []) as Events[K][]).push(cb);\n\n      return () => {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        events[event] = ((events[event] || []) as Events[K][]).filter(\n          (i: unknown) => i !== cb\n        ) as Events[K][];\n      };\n    },\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type INanoEmitter<T extends EventsMap<keyof T>> = ReturnType<\n  typeof createNanoEvents\n>;\n","import { ISql } from \"@kikko-land/sql\";\n\nimport { IDbState, IQuery } from \"./types\";\n\nexport const assureDbIsRunning = (state: IDbState, toStart: () => string) => {\n  const {\n    sharedState: { runningState$, dbName },\n  } = state;\n\n  if (runningState$.value !== \"running\") {\n    throw new Error(`Failed to start ${toStart()}, db ${dbName} is stopping`);\n  }\n};\n\nexport const unwrapQueries = (queries: ISql[]): IQuery[] => {\n  return queries.map((q) => q.preparedQuery);\n};\n\nexport function makeId() {\n  let result = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < 32; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n}\n","import { ISql } from \"@kikko-land/sql\";\nimport { BehaviorSubject, filter, firstValueFrom } from \"rxjs\";\nimport { DeepReadonly } from \"ts-essentials\";\n\nimport { ITransaction } from \"./types\";\nimport { makeId } from \"./utils\";\n\nexport type DistributiveOmit<\n  T,\n  K extends keyof Record<string, unknown>\n> = T extends unknown ? Omit<T, K> : never;\n\nexport type IJob =\n  | { type: \"runTransaction\"; id: string; transaction: ITransaction }\n  | { type: \"runQueries\"; queries: ISql[]; id: string }\n  | { type: \"initDb\"; name: string; id: string };\n\nexport type IJobsState = DeepReadonly<{\n  queue: IJob[];\n  current?: IJob;\n}>;\n\n// Actually it works like locking mechanism\nexport const acquireJob = async (\n  jobsState$: BehaviorSubject<IJobsState>,\n  _job: DistributiveOmit<IJob, \"id\">\n): Promise<IJob> => {\n  const id = makeId();\n  const job = { ..._job, id };\n\n  const { current, queue } = jobsState$.value;\n\n  if (current || queue.length > 0) {\n    const promise = firstValueFrom(\n      jobsState$.pipe(filter(({ current }) => current?.id === id))\n    );\n\n    jobsState$.next({ queue: [...queue, job], current });\n\n    await promise;\n  } else {\n    jobsState$.next({ queue: [], current: job });\n  }\n\n  return job;\n};\n\nexport const releaseJob = (\n  jobsState$: BehaviorSubject<IJobsState>,\n  job: IJob\n) => {\n  const { current, queue } = jobsState$.value;\n\n  if (current?.id !== job.id) {\n    throw new Error(\n      `Can't release job that is not currently running, current: ${JSON.stringify(\n        current\n      )}, queue: ${JSON.stringify(queue)}, toRelease: ${JSON.stringify(job)}`\n    );\n  }\n\n  jobsState$.next({ queue: queue.slice(1), current: queue[0] });\n};\n\nexport const whenAllJobsDone = async (\n  jobsState$: BehaviorSubject<IJobsState>\n) => {\n  return firstValueFrom(\n    jobsState$.pipe(filter(({ queue }) => queue.length === 0))\n  );\n};\n","import {\n  BehaviorSubject,\n  filter,\n  firstValueFrom,\n  map,\n  of,\n  pipe,\n  switchMap,\n  take,\n} from \"rxjs\";\n\nimport { createNanoEvents } from \"./createNanoEvents\";\nimport { acquireJob, IJobsState, releaseJob, whenAllJobsDone } from \"./job\";\nimport {\n  IDbBackend,\n  IDbState,\n  IKikkoEvents,\n  IQueriesMiddleware,\n} from \"./types\";\nimport { makeId } from \"./utils\";\n\nexport type IDbClientPlugin = (state: IDbState) => IDbState;\n\nexport type IInitDbClientConfig = {\n  dbName: string;\n  dbBackend: Promise<IDbBackend> | IDbBackend;\n  plugins?: IDbClientPlugin[];\n  queriesMiddlewares?: IQueriesMiddleware[];\n};\n\nexport const initDbClient = async ({\n  dbName,\n  plugins,\n  queriesMiddlewares,\n  dbBackend,\n}: IInitDbClientConfig): Promise<IDbState> => {\n  const runningState$ = new BehaviorSubject<\"running\" | \"stopping\" | \"stopped\">(\n    \"running\"\n  );\n\n  const dbBackendCalled = (await dbBackend)({\n    dbName,\n    stopped$: runningState$.pipe(\n      filter((e) => e === \"stopped\"),\n      map(() => undefined as void),\n      take(1)\n    ),\n  });\n\n  const jobsState$ = new BehaviorSubject<IJobsState>({\n    queue: [],\n    current: undefined,\n  });\n\n  const state: IDbState = {\n    sharedState: {\n      clientId: makeId(),\n      dbBackend: dbBackendCalled,\n      dbName,\n\n      runningState$,\n      stopStarted$: runningState$.pipe(\n        filter((e) => e === \"stopping\"),\n        map(() => undefined as void),\n        take(1)\n      ),\n\n      eventsEmitter: createNanoEvents<IKikkoEvents>(),\n\n      jobsState$,\n      transactionsState: {},\n    },\n    localState: {\n      queriesMiddlewares: queriesMiddlewares || [],\n      transactionsState: {},\n    },\n  };\n\n  const job = await acquireJob(state.sharedState.jobsState$, {\n    type: \"initDb\",\n    name: dbName,\n  });\n\n  const initializerPipe = pipe(\n    switchMap(async () => {\n      await dbBackendCalled.initialize();\n    }),\n    map(() => {\n      let currentState = state;\n\n      for (const plugin of plugins || []) {\n        currentState = plugin(state);\n      }\n\n      return currentState;\n    }),\n    switchMap(async (currentState) => {\n      releaseJob(jobsState$, job);\n\n      await state.sharedState.eventsEmitter.emit(\"initialized\", state);\n      return currentState;\n    })\n  );\n\n  return firstValueFrom(\n    state.sharedState.runningState$.pipe(\n      switchMap((runningState) =>\n        runningState === \"running\"\n          ? of(undefined).pipe(initializerPipe)\n          : of(state)\n      )\n    )\n  );\n};\n\nexport const stopDb = async (state: IDbState) => {\n  state.sharedState.runningState$.next(\"stopping\");\n\n  await whenAllJobsDone(state.sharedState.jobsState$);\n\n  console.log(\"stopped db\");\n\n  state.sharedState.runningState$.next(\"stopped\");\n};\n","import { ISqlAdapter } from \"@kikko-land/sql\";\n\nimport { acquireJob, IJob, releaseJob } from \"./job\";\nimport {\n  IDbState,\n  INextQueriesMiddleware,\n  IQueriesMiddleware,\n  IQueriesMiddlewareState,\n} from \"./types\";\nimport { assureDbIsRunning, unwrapQueries } from \"./utils\";\n\nconst runQueriesMiddleware: IQueriesMiddleware = async ({\n  dbState,\n  queries,\n}) => {\n  const {\n    localState: { transactionsState: transactionsLocalState, suppressLog },\n    sharedState: {\n      transactionsState: transactionsSharedState,\n      jobsState$,\n      dbBackend,\n    },\n  } = dbState;\n\n  if (!transactionsLocalState.current) {\n    assureDbIsRunning(dbState, () => JSON.stringify(queries));\n  }\n\n  if (transactionsLocalState.current && transactionsSharedState.current) {\n    if (\n      transactionsLocalState.current.id !== transactionsSharedState.current.id\n    ) {\n      // Is it possible?\n      throw new Error(\n        \"Internal error: local running transaction is not the same as shared state transaction\"\n      );\n    }\n  }\n\n  let job: IJob | undefined;\n\n  if (!transactionsLocalState.current) {\n    job = await acquireJob(jobsState$, {\n      type: \"runQueries\",\n      queries: queries.map((q) => q.toSql()),\n    });\n  }\n\n  const execOpts = {\n    log: {\n      suppress: Boolean(suppressLog),\n      transactionId: transactionsLocalState.current?.id,\n    },\n  };\n\n  try {\n    const result = await dbBackend.execQueries(\n      unwrapQueries(queries.map((q) => q.toSql())),\n      execOpts\n    );\n\n    return { dbState, result, queries };\n  } finally {\n    if (job) {\n      releaseJob(jobsState$, job);\n    }\n  }\n};\n\nexport const runQueries = async <D extends Record<string, unknown>>(\n  state: IDbState,\n  queries: ISqlAdapter[]\n): Promise<D[][]> => {\n  const middlewares: IQueriesMiddleware[] = [\n    ...state.localState.queriesMiddlewares,\n    runQueriesMiddleware,\n  ].reverse();\n\n  let toCall: INextQueriesMiddleware = (args) => Promise.resolve(args);\n\n  for (const middleware of middlewares) {\n    const currentCall = toCall;\n\n    toCall = (args: IQueriesMiddlewareState) =>\n      middleware({ ...args, next: currentCall });\n  }\n\n  return (\n    await toCall({\n      dbState: state,\n      result: [],\n      queries: queries.map((q) => q.toSql()),\n    })\n  ).result as D[][];\n};\n\nexport const runQuery = async <D extends Record<string, unknown>>(\n  state: IDbState,\n  query: ISqlAdapter\n) => {\n  return (await runQueries<D>(state, [query]))[0] || [];\n};\n","import { IDbState } from \"./types\";\n\nexport const suppressLog = <T>(\n  state: IDbState,\n  func: (state: IDbState) => T\n): T => {\n  return func({\n    ...state,\n    localState: { ...state.localState, suppressLog: true },\n  });\n};\n\nexport const withSuppressedLog = (state: IDbState): IDbState => {\n  return { ...state, localState: { ...state.localState, suppressLog: true } };\n};\n","import { sql } from \"@kikko-land/sql\";\n\nimport { acquireJob, releaseJob } from \"./job\";\nimport { IDbState, ITransaction } from \"./types\";\nimport { assureDbIsRunning, makeId, unwrapQueries } from \"./utils\";\n\nconst runInTransactionFunc = async <T>(\n  state: IDbState,\n  transactionType: \"DEFERRED\" | \"IMMEDIATE\" | \"EXCLUSIVE\",\n  func: (state: IDbState) => Promise<T>\n) => {\n  const {\n    localState: { transactionsState: transactionsLocalState },\n    sharedState: {\n      transactionsState: transactionsSharedState,\n      eventsEmitter,\n      dbBackend,\n    },\n  } = state;\n\n  // It's indeed that function in same transaction don't need to check db is running\n  // Cause all transaction will await to execute on DB before stop\n  if (transactionsLocalState.current && transactionsSharedState.current) {\n    if (\n      transactionsLocalState.current.id !== transactionsSharedState.current.id\n    ) {\n      // Is it possible?\n      throw new Error(\n        \"Internal error: local running transaction is not the same as shared state transaction\"\n      );\n    }\n\n    // we already in same transaction\n    return await func(state);\n  }\n\n  assureDbIsRunning(state, () => \"transaction\");\n\n  const transaction: ITransaction = {\n    id: makeId(),\n  };\n\n  state = {\n    ...state,\n    localState: {\n      ...state.localState,\n      transactionsState: { current: transaction },\n    },\n  };\n\n  const job = await acquireJob(state.sharedState.jobsState$, {\n    type: \"runTransaction\",\n    transaction,\n  });\n\n  const execOpts = {\n    log: {\n      suppress: Boolean(state.localState.suppressLog),\n      transactionId: transaction.id,\n    },\n  };\n\n  try {\n    transactionsSharedState.current = transaction;\n\n    await eventsEmitter.emit(\"transactionWillStart\", state, transaction);\n\n    await dbBackend.execQueries(\n      unwrapQueries([sql`BEGIN ${sql.raw(transactionType)} TRANSACTION;`]),\n      execOpts\n    );\n\n    await eventsEmitter.emit(\"transactionStarted\", state, transaction);\n\n    try {\n      const res = await func(state);\n\n      await eventsEmitter.emit(\"transactionWillCommit\", state, transaction);\n\n      await dbBackend.execQueries(unwrapQueries([sql`COMMIT`]), execOpts);\n\n      await eventsEmitter.emit(\"transactionCommitted\", state, transaction);\n\n      return res;\n    } catch (e) {\n      console.error(\"Rollback transaction\", e);\n\n      await eventsEmitter.emit(\"transactionWillRollback\", state, transaction);\n\n      await dbBackend.execQueries(unwrapQueries([sql`ROLLBACK`]), execOpts);\n\n      await eventsEmitter.emit(\"transactionRollbacked\", state, transaction);\n\n      throw e;\n    }\n  } finally {\n    releaseJob(state.sharedState.jobsState$, job);\n  }\n};\n\n// By default it is deferred\nexport const runInDeferredTransaction = <T>(\n  state: IDbState,\n  func: (state: IDbState) => Promise<T>\n) => runInTransactionFunc(state, \"DEFERRED\", func);\nexport const runInImmediateTransaction = <T>(\n  state: IDbState,\n  func: (state: IDbState) => Promise<T>\n) => runInTransactionFunc(state, \"IMMEDIATE\", func);\nexport const runInExclusiveTransaction = <T>(\n  state: IDbState,\n  func: (state: IDbState) => Promise<T>\n) => runInTransactionFunc(state, \"EXCLUSIVE\", func);\n\nexport const runInTransaction = <T>(\n  state: IDbState,\n  func: (state: IDbState) => Promise<T>\n) => runInDeferredTransaction(state, func);\n"],"names":["firstValueFrom","filter","BehaviorSubject","map","take","pipe","switchMap","of","sql"],"mappings":"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"}