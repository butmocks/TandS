export declare type EventsMap<K extends keyof any> = {
    [P in K]: (...args: any[]) => Promise<void> | void;
};
export declare function createNanoEvents<Events extends EventsMap<keyof Events>>(): {
    emit<K extends keyof Events>(event: K, ...args: Parameters<Events[K]>): Promise<void>;
    on<K_1 extends keyof Events>(event: K_1, cb: Events[K_1]): () => void;
};
export declare type INanoEmitter<T extends EventsMap<keyof T>> = ReturnType<typeof createNanoEvents>;
