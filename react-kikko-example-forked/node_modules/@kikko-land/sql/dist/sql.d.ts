import { IContainsTable, ITableDef } from "./table";
export declare type IPrimitiveValue = string | number | null | Uint8Array;
export declare const isPrimitiveValue: (t: unknown) => t is IPrimitiveValue;
export declare type IRawValue = IPrimitiveValue | ISql | IContainsTable | ISqlAdapter;
export interface ISqlAdapter {
    toSql(): ISql;
}
export interface ISql extends ISqlAdapter {
    readonly _values: IPrimitiveValue[];
    readonly _strings: string[];
    readonly tables: ITableDef[];
    _cachedText?: string;
    _hash?: string;
    get isModifyQuery(): boolean;
    get isReadQuery(): boolean;
    get isEmpty(): boolean;
    get raw(): string;
    get hash(): string;
    get preparedQuery(): {
        values: IPrimitiveValue[];
        text: string;
    };
    inspect(): {
        preparedQuery: ISql["preparedQuery"];
        tables: ISql["tables"];
    };
    toString(): string;
}
export declare function sql(rawStrings: ReadonlyArray<string>, ...rawValues: IRawValue[]): ISql;
export declare namespace sql {
    var raw: (value: string) => ISql;
    var liter: (str: string) => ISql;
    var table: (name: string, dependsOnTables?: ITableDef[] | undefined) => ITableDef & IContainsTable;
    var isTable: typeof import("./table").isTable;
    var isSql: (x: unknown) => x is ISqlAdapter;
    var empty: ISql;
    var join: (values: IRawValue[], separator?: string, prefix?: string, suffix?: string) => ISql;
}
