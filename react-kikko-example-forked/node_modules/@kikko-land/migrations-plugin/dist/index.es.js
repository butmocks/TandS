import { runInTransaction, runQuery } from "@kikko-land/kikko";
import { sql, generateInsert } from "@kikko-land/sql";
const migrationsTable = "migrations";
const runMigrations = (state, migrations) => {
  if (migrations.length === 0)
    return;
  return runInTransaction(state, async (state2) => {
    await runQuery(state2, sql`
        CREATE TABLE IF NOT EXISTS ${sql.raw(migrationsTable)} (
          id INTEGER PRIMARY KEY,
          name varchar(20) NOT NULL,
          migratedAt INTEGER NOT NULL
        )
      `);
    const migratedMigrations = await runQuery(state2, sql`SELECT id FROM ${sql.raw(migrationsTable)}`);
    const migratedIds = new Set(migratedMigrations.map(({ id }) => id));
    for (const migration of migrations.sort((a, b) => a.id - b.id)) {
      if (migratedIds.has(migration.id))
        return;
      await migration.up(state2);
      await runQuery(state2, generateInsert(migrationsTable, [
        {
          id: migration.id,
          name: migration.name,
          migratedAt: new Date().getTime()
        }
      ]));
    }
  });
};
const migrationsPlugin = ({
  migrations
}) => (state) => {
  state.sharedState.eventsEmitter.on("initialized", async () => {
    await runMigrations(state, migrations);
  });
  return state;
};
export { migrationsPlugin };
//# sourceMappingURL=index.es.js.map
