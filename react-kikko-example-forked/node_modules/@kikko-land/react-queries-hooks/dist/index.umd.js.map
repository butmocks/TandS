{"version":3,"file":"index.umd.js","sources":["../src/DbProvider.tsx","../src/hooks/useQueries.tsx"],"sourcesContent":["import {\n  IDbState,\n  IInitDbClientConfig,\n  initDbClient,\n  stopDb,\n} from \"@kikko-land/kikko\";\nimport React, { ReactElement, useContext, useEffect, useState } from \"react\";\n\nexport type IDbInitState =\n  | { type: \"initialized\"; db: IDbState; config: IInitDbClientConfig }\n  | { type: \"notInitialized\" }\n  | { type: \"initializing\"; config: IInitDbClientConfig };\n\nconst DbContext = React.createContext<IDbInitState>({\n  type: \"notInitialized\",\n});\n\nexport const DbProvider: React.FC<{\n  children?: React.ReactNode;\n  config: IInitDbClientConfig;\n}> = ({ children, config }) => {\n  const [currentState, setCurrentState] = useState<IDbInitState>({\n    type: \"notInitialized\",\n  });\n\n  useEffect(() => {\n    let shouldBeStopped = false;\n    let initializedDb: IDbState | undefined = undefined;\n\n    const cb = async () => {\n      setCurrentState({ type: \"initializing\", config });\n\n      const db = await initDbClient(config);\n      initializedDb = db;\n\n      if (shouldBeStopped) {\n        void stopDb(db);\n\n        return;\n      }\n\n      setCurrentState({ type: \"initialized\", db, config });\n    };\n\n    void cb();\n\n    return () => {\n      shouldBeStopped = true;\n\n      if (initializedDb) {\n        setCurrentState({ type: \"notInitialized\" });\n\n        void stopDb(initializedDb);\n      }\n    };\n  }, [config]);\n\n  return (\n    <DbContext.Provider value={currentState}>{children}</DbContext.Provider>\n  );\n};\n\nexport const useDbState = () => {\n  return useContext(DbContext);\n};\n\nexport const useDb = () => {\n  const res = useDbState();\n\n  if (res.type === \"initialized\") {\n    return res.db;\n  } else {\n    return undefined;\n  }\n};\n\nexport const useDbStrict = () => {\n  const db = useDb();\n\n  if (!db) throw new Error(\"DB is not initialized!\");\n\n  return db;\n};\n\nexport const EnsureDbLoaded: React.FC<{\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}> = ({ children, fallback }) => {\n  const dbState = useDbState();\n\n  return dbState.type === \"initialized\"\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (children as ReactElement<any, any>)\n    : fallback\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (fallback as ReactElement<unknown, any>)\n    : null;\n};\n","import { runInTransaction, withSuppressedLog } from \"@kikko-land/kikko\";\nimport { IDbState } from \"@kikko-land/kikko\";\nimport { listenQueries } from \"@kikko-land/reactive-queries-plugin\";\nimport { ISqlAdapter } from \"@kikko-land/sql\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { Falsy } from \"rxjs\";\n\nimport { useDbState } from \"../DbProvider\";\nimport {\n  DistributiveOmit,\n  IQueryHookResult,\n  IRunQueryHookResult,\n  ISingleQueryHookResult,\n} from \"./types\";\n\nexport function useQueries<D extends Record<string, unknown>>(\n  _queries: ISqlAdapter[] | Falsy,\n  _opts?: { suppressLog?: boolean; mapToObject?: boolean } | undefined\n): IQueryHookResult<D[]> {\n  const dbState = useDbState();\n\n  const { suppressLog } = {\n    suppressLog: _opts?.suppressLog !== undefined ? _opts.suppressLog : false,\n  };\n\n  const [currentQueries, setCurrentQueries] = useState<ISqlAdapter[]>(\n    _queries ? _queries : []\n  );\n  const [data, setData] = useState<D[][] | undefined>();\n  const [response, setResponse] = useState<\n    DistributiveOmit<IQueryHookResult<D[][]>, \"data\">\n  >(\n    _queries\n      ? dbState.type === \"initialized\"\n        ? { type: \"loading\" }\n        : { type: \"waitingDb\" }\n      : { type: \"noSqlPresent\" }\n  );\n\n  useEffect(() => {\n    if (currentQueries.length === 0) {\n      setResponse({ type: \"noSqlPresent\" });\n\n      return;\n    }\n\n    if (dbState.type !== \"initialized\") {\n      setResponse({ type: \"waitingDb\" });\n\n      return;\n    }\n\n    const db = suppressLog ? withSuppressedLog(dbState.db) : dbState.db;\n\n    const subscription = listenQueries<D>(db, currentQueries).subscribe(\n      (result) => {\n        setData(result);\n        setResponse({ type: \"loaded\" });\n      }\n    );\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [dbState, currentQueries, suppressLog]);\n\n  useEffect(() => {\n    if (\n      currentQueries.map((q) => q.toSql().hash).join() !==\n      (_queries || []).map((q) => q.toSql().hash).join()\n    ) {\n      setCurrentQueries(_queries || []);\n    }\n  }, [currentQueries, _queries]);\n\n  return useMemo(() => {\n    if (response.type === \"loaded\") {\n      if (!data) {\n        throw new Error(\n          \"Internal error: response state is loaded, but there is not data!\"\n        );\n      }\n\n      return { ...response, data };\n    }\n\n    return { ...response, data: data || [] };\n  }, [data, response]);\n}\n\nexport function useQuery<D extends Record<string, unknown>>(\n  query: ISqlAdapter | Falsy,\n  _opts?: { suppressLog?: boolean; mapToObject?: boolean } | undefined\n): IQueryHookResult<D> {\n  const queries = useMemo(() => (query ? [query] : []), [query]);\n\n  const result = useQueries<D>(queries, _opts);\n\n  return useMemo(() => {\n    if (result.type === \"loaded\") {\n      if (!result.data) {\n        throw new Error(\n          \"Internal error: response state is loaded, but there is not data!\"\n        );\n      }\n\n      return { ...result, data: result.data[0] || [] };\n    }\n\n    return {\n      ...result,\n      data: result.data?.[0] || [],\n    };\n  }, [result]);\n}\n\nexport function useQueryFirstRow<D extends Record<string, unknown>>(\n  query: ISqlAdapter | Falsy,\n  _opts?: { suppressLog?: boolean; mapToObject?: boolean } | undefined\n): ISingleQueryHookResult<D> {\n  const res = useQuery<D>(query, _opts);\n\n  return useMemo(() => {\n    if (res.type === \"loaded\") {\n      return { ...res, data: res.data[0] };\n    }\n\n    return { ...res, data: res.data?.[0] };\n  }, [res]);\n}\n\nfunction useIsMounted() {\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return useCallback(() => isMounted.current, []);\n}\n\nexport function useRunQuery<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  D extends (db: IDbState) => (...args: any[]) => Promise<R>,\n  R\n>(\n  cb: D,\n  _opts?: { suppressLog?: boolean; inTransaction?: boolean } | undefined\n): readonly [\n  (...args: Parameters<ReturnType<D>>) => Promise<R>,\n  IRunQueryHookResult<R>\n] {\n  const { suppressLog, inTransaction } = {\n    suppressLog: _opts?.suppressLog !== undefined ? _opts.suppressLog : false,\n    inTransaction:\n      _opts?.inTransaction !== undefined ? _opts.inTransaction : true,\n  };\n\n  const dbState = useDbState();\n  const isMounted = useIsMounted();\n\n  const [data, setData] = useState<R>();\n  const [runStateType, setRunStateType] = useState<\n    IRunQueryHookResult<R>[\"type\"]\n  >(dbState.type === \"initialized\" ? \"idle\" : \"waitingDb\");\n\n  useEffect(() => {\n    if (dbState.type === \"initialized\") {\n      setRunStateType(\"idle\");\n    } else {\n      setRunStateType(\"waitingDb\");\n    }\n  }, [dbState.type]);\n\n  const toCall = useCallback(\n    async (...args: Parameters<ReturnType<D>>) => {\n      if (dbState.type !== \"initialized\") {\n        // TODO: maybe wait db init as opts?\n\n        throw new Error(\"Db not initialized!\");\n      }\n\n      setRunStateType(\"running\");\n\n      const db = suppressLog ? withSuppressedLog(dbState.db) : dbState.db;\n      const res = await (inTransaction\n        ? runInTransaction(db, (db) => cb(db)(...args))\n        : cb(db)(...args));\n\n      if (isMounted()) {\n        setData(res);\n        setRunStateType(\"done\");\n      }\n\n      return res;\n    },\n    [cb, dbState, inTransaction, isMounted, suppressLog]\n  );\n\n  // Simulation of useEvent\n  const toCallRef = useRef<(...args: Parameters<ReturnType<D>>) => Promise<R>>(\n    toCall\n  );\n  useEffect(() => {\n    toCallRef.current = toCall;\n  }, [toCall]);\n\n  const run = useCallback((...args: Parameters<ReturnType<D>>) => {\n    return toCallRef.current(...args);\n  }, []);\n\n  const result = useMemo(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return { type: runStateType, data: data! };\n  }, [data, runStateType]);\n\n  return [run, result];\n}\n\nexport function useCacheQuery<T extends ISqlAdapter>(_query: T): T {\n  const [query, setQuery] = useState(_query);\n\n  useEffect(() => {\n    if (query.toSql().hash !== _query.toSql().hash) {\n      setQuery(_query);\n    }\n  }, [_query, query]);\n\n  return query;\n}\n"],"names":["React","useState","useEffect","initDbClient","stopDb","useContext","withSuppressedLog","listenQueries","useMemo","useRef","useCallback","runInTransaction"],"mappings":"8gBAaA,KAAM,GAAYA,UAAM,cAA4B,CAClD,KAAM,gBACR,CAAC,EAEY,EAGR,CAAC,CAAE,WAAU,YAAa,CACvB,KAAA,CAAC,EAAc,GAAmBC,WAAuB,CAC7D,KAAM,gBAAA,CACP,EAEDC,SAAAA,UAAU,IAAM,CACd,GAAI,GAAkB,GAClB,EAiBJ,MAAK,AAfM,UAAY,CACrB,EAAgB,CAAE,KAAM,eAAgB,QAAQ,CAAA,EAE1C,KAAA,GAAK,KAAMC,gBAAa,CAAM,EAGpC,GAFgB,EAAA,EAEZ,EAAiB,CACnB,AAAKC,EAAAA,OAAO,CAAE,EAEd,MACF,CAEA,EAAgB,CAAE,KAAM,cAAe,KAAI,QAAQ,CAAA,CAAA,GAG7C,EAED,IAAM,CACO,EAAA,GAEd,GACc,GAAA,CAAE,KAAM,gBAAA,CAAkB,EAErCA,EAAAA,OAAO,CAAa,EAC3B,CACF,EACC,CAAC,CAAM,CAAC,EAGTJ,UAAA,cAAC,EAAU,SAAV,CAAmB,MAAO,CAAA,EAAe,CAAS,CAEvD,EAEa,EAAa,IACjBK,EAAAA,WAAW,CAAS,EAGhB,EAAQ,IAAM,CACzB,KAAM,GAAM,IAER,GAAA,EAAI,OAAS,cACf,MAAO,GAAI,EAIf,EAEa,EAAc,IAAM,CAC/B,KAAM,GAAK,IAEX,GAAI,CAAC,EAAU,KAAA,IAAI,OAAM,wBAAwB,EAE1C,MAAA,EACT,EAEa,EAGR,CAAC,CAAE,WAAU,cAGT,AAFS,IAED,OAAS,cAEnB,EACD,GAGA,KCjFC,WACL,EACA,EACuB,CACvB,KAAM,GAAU,IAEV,CAAE,eAAgB,CACtB,YAAa,kBAAO,eAAgB,OAAY,EAAM,YAAc,EAAA,EAGhE,CAAC,EAAgB,GAAqBJ,WAC1C,GAAsB,CAAA,CACxB,EACM,CAAC,EAAM,GAAWA,EAA4B,SAAA,EAC9C,CAAC,EAAU,GAAeA,WAG9B,EACI,EAAQ,OAAS,cACf,CAAE,KAAM,SAAU,EAClB,CAAE,KAAM,aACV,CAAE,KAAM,eACd,EAEAC,SAAAA,UAAU,IAAM,CACV,GAAA,EAAe,SAAW,EAAG,CACnB,EAAA,CAAE,KAAM,cAAA,CAAgB,EAEpC,MACF,CAEI,GAAA,EAAQ,OAAS,cAAe,CACtB,EAAA,CAAE,KAAM,WAAA,CAAa,EAEjC,MACF,CAEA,KAAM,GAAK,EAAcI,EAAA,kBAAkB,EAAQ,EAAE,EAAI,EAAQ,GAE3D,EAAeC,EAAAA,cAAiB,EAAI,CAAc,EAAE,UACxD,AAAC,GAAW,CACV,EAAQ,CAAM,EACF,EAAA,CAAE,KAAM,QAAA,CAAU,CAAA,CAElC,EAEA,MAAO,IAAM,CACX,EAAa,YAAY,CAAA,CAE1B,EAAA,CAAC,EAAS,EAAgB,CAAW,CAAC,EAEzCL,EAAAA,UAAU,IAAM,CAEZ,AAAA,EAAe,IAAI,AAAC,GAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,QAClC,CAAC,GAAG,IAAI,AAAC,GAAM,EAAE,QAAQ,IAAI,EAAE,QAE1B,EAAA,GAAY,CAAA,CAAE,CAClC,EACC,CAAC,EAAgB,CAAQ,CAAC,EAEtBM,UAAQ,IAAM,CACf,GAAA,EAAS,OAAS,SAAU,CAC9B,GAAI,CAAC,EACG,KAAA,IAAI,OACR,kEACF,EAGK,MAAA,CAAE,GAAG,EAAU,OACxB,CAEA,MAAO,CAAE,GAAG,EAAU,KAAM,GAAQ,CAAG,CAAA,CAAA,EACtC,CAAC,EAAM,CAAQ,CAAC,CACrB,CAEO,WACL,EACA,EACqB,CACf,KAAA,GAAUA,UAAQ,IAAO,EAAQ,CAAC,CAAK,EAAI,CAAC,EAAI,CAAC,CAAK,CAAC,EAEvD,EAAS,EAAc,EAAS,CAAK,EAE3C,MAAOA,WAAQ,IAAM,OACf,GAAA,EAAO,OAAS,SAAU,CACxB,GAAA,CAAC,EAAO,KACJ,KAAA,IAAI,OACR,kEACF,EAGK,MAAA,CAAE,GAAG,EAAQ,KAAM,EAAO,KAAK,IAAM,CAAA,EAC9C,CAEO,MAAA,CACL,GAAG,EACH,KAAM,MAAO,OAAP,cAAc,KAAM,CAAC,CAAA,CAC7B,EACC,CAAC,CAAM,CAAC,CACb,CAEO,WACL,EACA,EAC2B,CACrB,KAAA,GAAM,EAAY,EAAO,CAAK,EAEpC,MAAOA,WAAQ,IAAM,OACf,MAAA,GAAI,OAAS,SACR,CAAE,GAAG,EAAK,KAAM,EAAI,KAAK,IAG3B,CAAE,GAAG,EAAK,KAAM,KAAI,OAAJ,cAAW,GAAG,EACpC,CAAC,CAAG,CAAC,CACV,CAEA,YAAwB,CAChB,KAAA,GAAYC,SAAO,EAAK,EAE9BP,SAAAA,UAAU,IACR,GAAU,QAAU,GAEb,IAAM,CACX,EAAU,QAAU,EAAA,GAErB,CAAE,CAAA,EAEEQ,EAAY,YAAA,IAAM,EAAU,QAAS,CAAE,CAAA,CAChD,CAEO,WAKL,EACA,EAIA,CACM,KAAA,CAAE,cAAa,iBAAkB,CACrC,YAAa,kBAAO,eAAgB,OAAY,EAAM,YAAc,GACpE,cACE,kBAAO,iBAAkB,OAAY,EAAM,cAAgB,EAAA,EAGzD,EAAU,IACV,EAAY,IAEZ,CAAC,EAAM,GAAWT,EAAY,SAAA,EAC9B,CAAC,EAAc,GAAmBA,EAAA,SAEtC,EAAQ,OAAS,cAAgB,OAAS,WAAW,EAEvDC,EAAAA,UAAU,IAAM,CACV,AAAA,EAAQ,OAAS,cACnB,EAAgB,MAAM,EAEtB,EAAgB,WAAW,CAC7B,EACC,CAAC,EAAQ,IAAI,CAAC,EAEX,KAAA,GAASQ,EAAAA,YACb,SAAU,IAAoC,CACxC,GAAA,EAAQ,OAAS,cAGb,KAAA,IAAI,OAAM,qBAAqB,EAGvC,EAAgB,SAAS,EAEzB,KAAM,GAAK,EAAcJ,EAAA,kBAAkB,EAAQ,EAAE,EAAI,EAAQ,GAC3D,EAAM,KAAO,GACfK,EAAAA,iBAAiB,EAAI,AAAC,GAAO,EAAG,CAAE,EAAE,GAAG,CAAI,CAAC,EAC5C,EAAG,CAAE,EAAE,GAAG,CAAI,GAElB,MAAI,MACF,GAAQ,CAAG,EACX,EAAgB,MAAM,GAGjB,CAAA,EAET,CAAC,EAAI,EAAS,EAAe,EAAW,CAAW,CACrD,EAGM,EAAYF,SAChB,CACF,EACAP,EAAAA,UAAU,IAAM,CACd,EAAU,QAAU,CAAA,EACnB,CAAC,CAAM,CAAC,EAEL,KAAA,GAAMQ,EAAAA,YAAY,IAAI,IACnB,EAAU,QAAQ,GAAG,CAAI,EAC/B,CAAE,CAAA,EAEC,EAASF,EAAAA,QAAQ,IAEd,EAAE,KAAM,EAAc,SAC5B,CAAC,EAAM,CAAY,CAAC,EAEhB,MAAA,CAAC,EAAK,CAAM,CACrB,CAEO,WAA8C,EAAc,CACjE,KAAM,CAAC,EAAO,GAAYP,EAAA,SAAS,CAAM,EAEzCC,SAAAA,UAAU,IAAM,CACd,AAAI,EAAM,QAAQ,OAAS,EAAO,QAAQ,MACxC,EAAS,CAAM,CACjB,EACC,CAAC,EAAQ,CAAK,CAAC,EAEX,CACT"}