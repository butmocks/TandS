import { IDbState } from "@kikko-land/kikko";
import { ISqlAdapter } from "@kikko-land/sql";
import { Falsy } from "rxjs";
import { IQueryHookResult, IRunQueryHookResult, ISingleQueryHookResult } from "./types";
export declare function useQueries<D extends Record<string, unknown>>(_queries: ISqlAdapter[] | Falsy, _opts?: {
    suppressLog?: boolean;
    mapToObject?: boolean;
} | undefined): IQueryHookResult<D[]>;
export declare function useQuery<D extends Record<string, unknown>>(query: ISqlAdapter | Falsy, _opts?: {
    suppressLog?: boolean;
    mapToObject?: boolean;
} | undefined): IQueryHookResult<D>;
export declare function useQueryFirstRow<D extends Record<string, unknown>>(query: ISqlAdapter | Falsy, _opts?: {
    suppressLog?: boolean;
    mapToObject?: boolean;
} | undefined): ISingleQueryHookResult<D>;
export declare function useRunQuery<D extends (db: IDbState) => (...args: any[]) => Promise<R>, R>(cb: D, _opts?: {
    suppressLog?: boolean;
    inTransaction?: boolean;
} | undefined): readonly [
    (...args: Parameters<ReturnType<D>>) => Promise<R>,
    IRunQueryHookResult<R>
];
export declare function useCacheQuery<T extends ISqlAdapter>(_query: T): T;
