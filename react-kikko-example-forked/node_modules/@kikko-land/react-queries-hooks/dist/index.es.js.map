{"version":3,"file":"index.es.js","sources":["../src/DbProvider.tsx","../src/hooks/useQueries.tsx"],"sourcesContent":["import {\n  IDbState,\n  IInitDbClientConfig,\n  initDbClient,\n  stopDb,\n} from \"@kikko-land/kikko\";\nimport React, { ReactElement, useContext, useEffect, useState } from \"react\";\n\nexport type IDbInitState =\n  | { type: \"initialized\"; db: IDbState; config: IInitDbClientConfig }\n  | { type: \"notInitialized\" }\n  | { type: \"initializing\"; config: IInitDbClientConfig };\n\nconst DbContext = React.createContext<IDbInitState>({\n  type: \"notInitialized\",\n});\n\nexport const DbProvider: React.FC<{\n  children?: React.ReactNode;\n  config: IInitDbClientConfig;\n}> = ({ children, config }) => {\n  const [currentState, setCurrentState] = useState<IDbInitState>({\n    type: \"notInitialized\",\n  });\n\n  useEffect(() => {\n    let shouldBeStopped = false;\n    let initializedDb: IDbState | undefined = undefined;\n\n    const cb = async () => {\n      setCurrentState({ type: \"initializing\", config });\n\n      const db = await initDbClient(config);\n      initializedDb = db;\n\n      if (shouldBeStopped) {\n        void stopDb(db);\n\n        return;\n      }\n\n      setCurrentState({ type: \"initialized\", db, config });\n    };\n\n    void cb();\n\n    return () => {\n      shouldBeStopped = true;\n\n      if (initializedDb) {\n        setCurrentState({ type: \"notInitialized\" });\n\n        void stopDb(initializedDb);\n      }\n    };\n  }, [config]);\n\n  return (\n    <DbContext.Provider value={currentState}>{children}</DbContext.Provider>\n  );\n};\n\nexport const useDbState = () => {\n  return useContext(DbContext);\n};\n\nexport const useDb = () => {\n  const res = useDbState();\n\n  if (res.type === \"initialized\") {\n    return res.db;\n  } else {\n    return undefined;\n  }\n};\n\nexport const useDbStrict = () => {\n  const db = useDb();\n\n  if (!db) throw new Error(\"DB is not initialized!\");\n\n  return db;\n};\n\nexport const EnsureDbLoaded: React.FC<{\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}> = ({ children, fallback }) => {\n  const dbState = useDbState();\n\n  return dbState.type === \"initialized\"\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (children as ReactElement<any, any>)\n    : fallback\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (fallback as ReactElement<unknown, any>)\n    : null;\n};\n","import { runInTransaction, withSuppressedLog } from \"@kikko-land/kikko\";\nimport { IDbState } from \"@kikko-land/kikko\";\nimport { listenQueries } from \"@kikko-land/reactive-queries-plugin\";\nimport { ISqlAdapter } from \"@kikko-land/sql\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { Falsy } from \"rxjs\";\n\nimport { useDbState } from \"../DbProvider\";\nimport {\n  DistributiveOmit,\n  IQueryHookResult,\n  IRunQueryHookResult,\n  ISingleQueryHookResult,\n} from \"./types\";\n\nexport function useQueries<D extends Record<string, unknown>>(\n  _queries: ISqlAdapter[] | Falsy,\n  _opts?: { suppressLog?: boolean; mapToObject?: boolean } | undefined\n): IQueryHookResult<D[]> {\n  const dbState = useDbState();\n\n  const { suppressLog } = {\n    suppressLog: _opts?.suppressLog !== undefined ? _opts.suppressLog : false,\n  };\n\n  const [currentQueries, setCurrentQueries] = useState<ISqlAdapter[]>(\n    _queries ? _queries : []\n  );\n  const [data, setData] = useState<D[][] | undefined>();\n  const [response, setResponse] = useState<\n    DistributiveOmit<IQueryHookResult<D[][]>, \"data\">\n  >(\n    _queries\n      ? dbState.type === \"initialized\"\n        ? { type: \"loading\" }\n        : { type: \"waitingDb\" }\n      : { type: \"noSqlPresent\" }\n  );\n\n  useEffect(() => {\n    if (currentQueries.length === 0) {\n      setResponse({ type: \"noSqlPresent\" });\n\n      return;\n    }\n\n    if (dbState.type !== \"initialized\") {\n      setResponse({ type: \"waitingDb\" });\n\n      return;\n    }\n\n    const db = suppressLog ? withSuppressedLog(dbState.db) : dbState.db;\n\n    const subscription = listenQueries<D>(db, currentQueries).subscribe(\n      (result) => {\n        setData(result);\n        setResponse({ type: \"loaded\" });\n      }\n    );\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [dbState, currentQueries, suppressLog]);\n\n  useEffect(() => {\n    if (\n      currentQueries.map((q) => q.toSql().hash).join() !==\n      (_queries || []).map((q) => q.toSql().hash).join()\n    ) {\n      setCurrentQueries(_queries || []);\n    }\n  }, [currentQueries, _queries]);\n\n  return useMemo(() => {\n    if (response.type === \"loaded\") {\n      if (!data) {\n        throw new Error(\n          \"Internal error: response state is loaded, but there is not data!\"\n        );\n      }\n\n      return { ...response, data };\n    }\n\n    return { ...response, data: data || [] };\n  }, [data, response]);\n}\n\nexport function useQuery<D extends Record<string, unknown>>(\n  query: ISqlAdapter | Falsy,\n  _opts?: { suppressLog?: boolean; mapToObject?: boolean } | undefined\n): IQueryHookResult<D> {\n  const queries = useMemo(() => (query ? [query] : []), [query]);\n\n  const result = useQueries<D>(queries, _opts);\n\n  return useMemo(() => {\n    if (result.type === \"loaded\") {\n      if (!result.data) {\n        throw new Error(\n          \"Internal error: response state is loaded, but there is not data!\"\n        );\n      }\n\n      return { ...result, data: result.data[0] || [] };\n    }\n\n    return {\n      ...result,\n      data: result.data?.[0] || [],\n    };\n  }, [result]);\n}\n\nexport function useQueryFirstRow<D extends Record<string, unknown>>(\n  query: ISqlAdapter | Falsy,\n  _opts?: { suppressLog?: boolean; mapToObject?: boolean } | undefined\n): ISingleQueryHookResult<D> {\n  const res = useQuery<D>(query, _opts);\n\n  return useMemo(() => {\n    if (res.type === \"loaded\") {\n      return { ...res, data: res.data[0] };\n    }\n\n    return { ...res, data: res.data?.[0] };\n  }, [res]);\n}\n\nfunction useIsMounted() {\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return useCallback(() => isMounted.current, []);\n}\n\nexport function useRunQuery<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  D extends (db: IDbState) => (...args: any[]) => Promise<R>,\n  R\n>(\n  cb: D,\n  _opts?: { suppressLog?: boolean; inTransaction?: boolean } | undefined\n): readonly [\n  (...args: Parameters<ReturnType<D>>) => Promise<R>,\n  IRunQueryHookResult<R>\n] {\n  const { suppressLog, inTransaction } = {\n    suppressLog: _opts?.suppressLog !== undefined ? _opts.suppressLog : false,\n    inTransaction:\n      _opts?.inTransaction !== undefined ? _opts.inTransaction : true,\n  };\n\n  const dbState = useDbState();\n  const isMounted = useIsMounted();\n\n  const [data, setData] = useState<R>();\n  const [runStateType, setRunStateType] = useState<\n    IRunQueryHookResult<R>[\"type\"]\n  >(dbState.type === \"initialized\" ? \"idle\" : \"waitingDb\");\n\n  useEffect(() => {\n    if (dbState.type === \"initialized\") {\n      setRunStateType(\"idle\");\n    } else {\n      setRunStateType(\"waitingDb\");\n    }\n  }, [dbState.type]);\n\n  const toCall = useCallback(\n    async (...args: Parameters<ReturnType<D>>) => {\n      if (dbState.type !== \"initialized\") {\n        // TODO: maybe wait db init as opts?\n\n        throw new Error(\"Db not initialized!\");\n      }\n\n      setRunStateType(\"running\");\n\n      const db = suppressLog ? withSuppressedLog(dbState.db) : dbState.db;\n      const res = await (inTransaction\n        ? runInTransaction(db, (db) => cb(db)(...args))\n        : cb(db)(...args));\n\n      if (isMounted()) {\n        setData(res);\n        setRunStateType(\"done\");\n      }\n\n      return res;\n    },\n    [cb, dbState, inTransaction, isMounted, suppressLog]\n  );\n\n  // Simulation of useEvent\n  const toCallRef = useRef<(...args: Parameters<ReturnType<D>>) => Promise<R>>(\n    toCall\n  );\n  useEffect(() => {\n    toCallRef.current = toCall;\n  }, [toCall]);\n\n  const run = useCallback((...args: Parameters<ReturnType<D>>) => {\n    return toCallRef.current(...args);\n  }, []);\n\n  const result = useMemo(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return { type: runStateType, data: data! };\n  }, [data, runStateType]);\n\n  return [run, result];\n}\n\nexport function useCacheQuery<T extends ISqlAdapter>(_query: T): T {\n  const [query, setQuery] = useState(_query);\n\n  useEffect(() => {\n    if (query.toSql().hash !== _query.toSql().hash) {\n      setQuery(_query);\n    }\n  }, [_query, query]);\n\n  return query;\n}\n"],"names":[],"mappings":"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"}