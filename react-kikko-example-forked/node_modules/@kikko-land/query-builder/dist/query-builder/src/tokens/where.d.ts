import { IBaseToken, TokenType } from "../types";
import { IBinaryOperator, IConditionValue } from "./binary";
import { IUnaryOperator } from "./unary";
export interface IWhereState {
    _whereValue?: IBaseToken<TokenType.RawSql> | IBinaryOperator | IUnaryOperator;
    where: typeof where;
    orWhere: typeof orWhere;
}
export declare function where<T extends IWhereState>(this: T, ...values: IConditionValue[]): T;
export declare function orWhere<T extends IWhereState>(this: T, ...values: IConditionValue[]): T;
