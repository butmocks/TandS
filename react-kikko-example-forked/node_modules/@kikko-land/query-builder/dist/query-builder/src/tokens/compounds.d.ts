import { ISql } from "@kikko-land/sql";
import { IBaseToken, TokenType } from "../types";
import { ISelectStatement } from "./statements/select";
import { IValuesStatement } from "./statements/values";
declare type IUnionArg = ISelectStatement | IValuesStatement | ISql;
export interface ICompoundOperator extends IBaseToken<TokenType.OrderTerm> {
    _compoundType: "UNION" | "UNION ALL" | "INTERSECT" | "EXCEPT";
    _value: ISelectStatement | IValuesStatement | IBaseToken<TokenType.RawSql>;
}
export interface ICompoundState {
    _compoundValues: ICompoundOperator[];
    union: typeof union;
    unionAll: typeof unionAll;
    intersect: typeof intersect;
    except: typeof except;
    withoutCompound: typeof withoutCompound;
}
export declare function union<T extends ICompoundState>(this: T, ...values: IUnionArg[]): T;
export declare function unionAll<T extends ICompoundState>(this: T, ...values: IUnionArg[]): T;
export declare function intersect<T extends ICompoundState>(this: T, ...values: IUnionArg[]): T;
export declare function except<T extends ICompoundState>(this: T, ...values: IUnionArg[]): T;
export declare function withoutCompound<T extends ICompoundState>(this: T): T & {
    _compoundValues: never[];
};
export {};
