import { ISql } from "@kikko-land/sql";
import { IBaseToken, TokenType } from "../types";
import { ISelectStatement } from "./statements/select";
import { IValuesStatement } from "./statements/values";
export interface ICTETerm extends IBaseToken<TokenType.CTE> {
    _recursive: boolean;
    _values: {
        table: string;
        columns: string[];
        select: ISelectStatement | IValuesStatement | IBaseToken<TokenType.RawSql>;
    }[];
}
export interface ICTEState {
    _cteValue?: ICTETerm;
    with: typeof With;
    withRecursive: typeof withRecursive;
    withoutWith: typeof withoutWith;
}
export declare function With<T extends ICTEState>(this: T, args: {
    table: string;
    columns: string[];
    select: ISelectStatement | IValuesStatement | ISql;
}): T;
export declare function withRecursive<T extends ICTEState>(this: T, args: {
    table: string;
    columns: string[];
    select: ISelectStatement | IValuesStatement | ISql;
}): T;
export declare function withoutWith<T extends ICTEState>(this: T): T;
