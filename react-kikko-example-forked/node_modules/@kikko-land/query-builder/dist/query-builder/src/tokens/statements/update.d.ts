import { IContainsTable, IPrimitiveValue, ISqlAdapter } from "@kikko-land/sql";
import { IBaseToken, TokenType } from "../../types";
import { ICTEState } from "../cte";
import { IFromState } from "../from";
import { IJoinState } from "../join";
import { IOrReplaceState } from "../orReplace";
import { IReturningState } from "../returning";
import { IWhereState } from "../where";
import { ISelectStatement } from "./select";
import { IValuesStatement } from "./values";
declare type ISetValue = {
    columnName: string;
    toSet: IBaseToken<TokenType.RawSql> | IPrimitiveValue | ISelectStatement | IValuesStatement;
} | IBaseToken<TokenType.RawSql>;
export interface IUpdateStatement extends IBaseToken<TokenType.Update>, ICTEState, IWhereState, IFromState, IReturningState, IOrReplaceState, IJoinState {
    _updateTable: IContainsTable;
    _setValues: ISetValue[];
    set(...args: ISetArgType[]): IUpdateStatement;
}
declare type ISetArgType = ISqlAdapter | {
    [key: string]: ISqlAdapter | IBaseToken<TokenType.RawSql> | IPrimitiveValue | ISelectStatement | IValuesStatement;
} | IBaseToken<TokenType.RawSql>;
export declare const update: (tbl: string | IContainsTable) => IUpdateStatement;
export {};
