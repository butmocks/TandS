import { ISqlAdapter } from "@kikko-land/sql";
import { IBaseToken, TokenType } from "../types";
import { ISelectStatement } from "./statements/select";
declare type IReturnValue = {
    _toSelect: "*" | string | ISelectStatement | IBaseToken;
    _alias?: string;
};
export interface IReturningClause extends IBaseToken<TokenType.Returning> {
    _values: IReturnValue[];
}
declare type IReturningArg = "*" | string | ISqlAdapter | IBaseToken | {
    [key: string]: ISqlAdapter | string | ISelectStatement;
};
export interface IReturningState {
    _returningValue: IReturningClause;
    returning: typeof returningForState;
    withoutReturning: typeof withoutReturningForState;
}
export declare const returning: (...args: IReturningArg[]) => IReturningClause;
export declare function returningForState<T extends IReturningState>(this: T, ...args: IReturningArg[]): T;
export declare function withoutReturningForState<T extends IReturningState>(this: T): T;
export {};
