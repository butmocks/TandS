import { ISqlAdapter } from "@kikko-land/sql";
import { IBaseToken, TokenType } from "../types";
export interface IOrderTerm extends IBaseToken<TokenType.OrderTerm> {
    _orderType: "DESC" | "ASC";
    _val: IBaseToken | string;
    _nullOrder?: "NULLS FIRST" | "NULLS LAST";
}
export declare const desc: (val: IBaseToken | ISqlAdapter | string, nullOrder?: "NULLS FIRST" | "NULLS LAST" | undefined) => IOrderTerm;
export declare const asc: (val: IBaseToken | ISqlAdapter | string, nullOrder?: "NULLS FIRST" | "NULLS LAST" | undefined) => IOrderTerm;
export interface IOrderState {
    _orderByValues: IOrderTerm[];
    orderBy: typeof orderBy;
    withoutOrder: typeof withoutOrder;
}
export declare function orderBy<T extends IOrderState>(this: T, ...orderTerm: IOrderTerm[]): T;
export declare function withoutOrder<T extends IOrderState>(this: T): T;
